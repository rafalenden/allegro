<?php

/**
 * Implements hook_menu().
 */
function allegro_menu() {
  $items['admin/allegro'] = array(
    'title' => 'Allegro',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer allegro'),
    'page arguments' => array('allegro_settings_form'),
    'file' => 'allegro.admin.inc',
  );
  $items['admin/allegro/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function allegro_permission() {
  return array(
    'administer allegro' => array(
      'title' => t('Administer Allegro'),
    ),
  );
}

/**
 * Connect to WebAPI and returns Allegro object extending SoapClient class.
 *
 * @param  bool $login
 *   Log into the Soap service.
 * @param  bool $cache
 *   Whether to reset the internal allegro_client cache.
 *
 * @return mixed
 *   Returns Allegro client object when success, false otherwise.
 */
function allegro_client($login = TRUE, $reset = FALSE) {
  if (!$reset) {
    $allegro = &drupal_static(__FUNCTION__);
  }

  if (empty($allegro) || $allegro->logged != $login) {
    try {
      $allegro = new AllegroAPI();

      $allegro->userLogin = variable_get('allegro_login');
      $allegro->userPassword = variable_get('allegro_password');
      $allegro->webapiKey = variable_get('allegro_webapikey');
      $allegro->countryCode = variable_get('allegro_country_code');
      $allegro->testMode = variable_get('allegro_test_mode');

      if ($login) {
        $allegro->login();
      }
      else {
        $allegro->init();
      }
    }
    catch (SoapFault $e) {
      if (module_exists('dblog') && user_access('access site reports')) {
        drupal_set_message(t('An error occurred while connecting to WebAPI service. Check <a href="@watchdog-url">watchdog</a> for more information.', array('@watchdog-url' => url('admin/reports/dblog'))), 'error');
      }
      else {
        drupal_set_message(t('An error occurred while connecting to WebAPI service. Check logs for more information.'), 'error');
      }
      throw $e;
    }
  }

  return !empty($allegro) ? $allegro : FALSE;
}

/**
 * Test connection to Allegro WebAPI service.
 *
 * @param string $login
 *   Service login.
 * @param string $password
 *   Service password.
 * @param string $webapikey
 *   API key to service.
 * @param int $countryCode
 *   Country code of targeted market.
 * @param bool $testMode
 *   Use WebAPI sandbox instead of production environment.
 *
 * @return bool
 *   TRUE when connection is successful, FALSE otherwise.
 */
function allegro_test_connection($login = NULL, $password = NULL, $webapikey = NULL, $countryCode = NULL, $testMode = FALSE) {
  if (!$login) {
    $login = variable_get('allegro_login');
  }
  if (!$password) {
    $password = variable_get('allegro_password');
  }
  if (!$webapikey) {
    $webapikey = variable_get('allegro_webapikey');
  }
  if (!$countryCode) {
    $countryCode = variable_get('allegro_country_code');
  }
  if (!$testMode) {
    $testMode = variable_get('allegro_test_mode');
  }

  if (!$login || !$password || !$webapikey || !$countryCode) {
    return FALSE;
  }

  try {
    AllegroAPI::testConnection($login, $password, $webapikey, $countryCode, $testMode);
    return TRUE;
  }
  catch (SoapFault $e) {
    return FALSE;
  }
}

/**
 * Convert object to array.
 *
 * @param object $object
 *
 * @return array
 */
function allegro_object2array($object) {
  if (!is_object($object) && !is_array($object)) {
    return $object;
  }
  if (is_object($object)) {
    $object = get_object_vars($object);
  }
  return array_map('allegro_object2array', $object);
}

/**
 * Load website by country code.
 *
 * @param int $country_code
 *   Load website with this country code.
 *
 * @return mixed
 *  Website address if found, FALSE otherwise.
 */
function allegro_load_website_by_country_code($country_code) {
  $websites = AllegroAPI::getSupportedWebsites();
  return isset($websites[$country_code]) ? $websites[$country_code] : FALSE;
}
