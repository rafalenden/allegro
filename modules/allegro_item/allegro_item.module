<?php

define('ALLEGRO_ITEM_STATUS_NOT_SOLD', 0);
define('ALLEGRO_ITEM_STATUS_SELLING', 1);
define('ALLEGRO_ITEM_STATUS_SOLD', 2);

/**
 * Implements hook_menu().
 */
function allegro_item_menu() {
  // Settings.
  $items['admin/allegro/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer allegro'),
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array('allegro_settings_form'),
    'file' => 'allegro.admin.inc',
    'file path' => drupal_get_path('module', 'allegro'),
  );
  $items['admin/allegro/settings/general'] = array(
    'title' => 'General',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['allegro-item/add'] = array(
    'title' => 'Add Allegro item',
    'page callback' => 'allegro_item_add_page',
    'access arguments' => array('create allegro items'),
    'file' => 'allegro_item.pages.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['allegro-item/%allegro_item'] = array(
    'title' => 'Allegro item',
    'page callback' => 'allegro_item_view_page',
    'page arguments' => array(1),
    'access arguments' => array('view allegro items'),
    'file' => 'allegro_item.pages.inc',
  );

  $items['allegro-item/%allegro_item/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['allegro-item/%allegro_item/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'allegro_item_edit_page',
    'page arguments' => array(1),
    'access arguments' => array('update allegro items'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'allegro_item.pages.inc',
    'weight' => 1,
  );

  $items['allegro-item/%allegro_item/finish'] = array(
    'title' => 'Finish',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('allegro_item_finish_confirm', 1),
    'access callback' => 'allegro_item_access',
    'access arguments' => array('finish allegro items', 1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'allegro_item.pages.inc',
    'weight' => 2,
  );

  $items['allegro-item/%allegro_item/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('allegro_item_delete_confirm', 1),
    'access callback' => 'allegro_item_access',
    'access arguments' => array('delete allegro items', 1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'allegro_item.pages.inc',
    'weight' => 3,
  );

  $items['allegro-item/%allegro_item/sell-again'] = array(
    'title' => 'Sell again',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('allegro_item_sell_again_confirm', 1),
    'access callback' => 'allegro_item_access',
    'access arguments' => array('sell again allegro items', 1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'allegro_item.pages.inc',
    'weight' => 3,
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function allegro_item_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'allegro-item/add' on 'admin/allegro' page.
  if ($root_path == 'admin/allegro') {
    $item = menu_get_item('allegro-item/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_entity_info().
 */
function allegro_item_entity_info() {
  $return['allegro_item'] = array(
    'label' => t('Allegro item'),
    'plural label' => t('Allegro items'),
    'module' => 'allegro_item',
    'entity class' => 'AllegroItem',
    'controller class' => 'AllegroItemController',
    'base table' => 'allegro_item',
    'static cache' => TRUE,
    'load_hook' => 'allegro_item_load',
    'uri callback' => 'entity_class_uri',
    'access callback' => 'allegro_item_access',
    'fieldable' => FALSE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'title',
    ),
    'bundles' => array(
      'allegro_item' => array(
        'label' => t('Allegro item'),
        'admin' => array(
          'path' => 'admin/allegro/settings',
          'access arguments' => array('administer allegro items'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE,
      ),
    ),
    // Add support for title module.
    'field replacement' => array(
      'title' => array(
        'field' => array(
          'type' => 'text',
          'cardinality' => 1,
          'translatable' => TRUE,
        ),
        'instance' => array(
          'label' => t('Title'),
          'description' => t('The Title of the Allegro item.'),
          'required' => FALSE,
          'settings' => array(
            'text_processing' => 0,
          ),
          'widget' => array(
            'weight' => -5,
          ),
        ),
      ),
    ),
  );
  return $return;
}

/**
 * Implements hook_admin_paths().
 */
function allegro_item_admin_paths() {
  $paths = array(
    'allegro-item/add' => TRUE,
    'allegro-item/*/edit' => TRUE,
    'allegro-item/*/delete' => TRUE,
    'allegro-item/*/finish' => TRUE,
    'allegro-item/*/sell-again' => TRUE,
  );
  return $paths;
}

/**
 * Wrapper around user_access().
 *
 * @param string $permission
 *   The permission, such as "administer nodes", being checked for.
 * @param object $allegro_item
 *   Allegro item entity object.
 * @return bool
 *  TRUE if the current user has the requested permission, FALSE otherwise.
 */
function allegro_item_access($permission, $allegro_item) {
  if ($permission == 'sell again allegro items' && $allegro_item->status == 0 && user_access($permission)) {
    return TRUE;
  }
  elseif ($allegro_item->status == 1 && user_access($permission)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Creates URL of Allegro item.
 *
 * @param int $item_id
 *   External Allegro item ID.
 * @param int $country_code
 *   Country code of Allegro item.
 *
 * @return string
 *   External URL (with protocol) to Allegro item.
 */
function allegro_item_url_external($item_id, $country_code = NULL) {
  if (empty($country_code)) {
    $country_code = variable_get('country_code', 1);
  }
  $websites = Allegro::getSupportedWebsites();
  return 'http://' . $websites[$country_code] . '/show_item.php?item=' . $item_id;
}

/**
 * Implements hook_field_extra_fields().
 */
function allegro_item_field_extra_fields() {
  $return['allegro_item']['allegro_item'] = array(
    'form' => array(
      'title' => array(
        'label' => t('Title'),
        'description' => t('The name of the Allegro item.'),
        'weight' => -5,
      ),
    ),
    'display' => array(
      'title' => array(
        'label' => t('Title'),
        'description' => t('The name of the Allegro item.'),
        'weight' => -5,
      ),
      'item_id' => array(
        'label' => t('Item ID'),
        'description' => t('External item ID.'),
        'weight' => 0,
      ),
    ),
  );
  return $return;
}

/**
 * Implements hook_permission().
 */
function allegro_item_permission() {
  return array(
    'administer allegro items' => array(
      'title' => t('Administer Allegro items'),
    ),
    'create allegro items' => array(
      'title' => t('Create Allegro items'),
    ),
    'update allegro items' => array(
      'title' => t('Update Allegro items'),
    ),
    'view allegro items' => array(
      'title' => t('View Allegro items'),
    ),
    'delete allegro items' => array(
      'title' => t('Delete Allegro items'),
    ),
  );
}

/**
 * Resizes images to pass Allegro validation.
 *
 * @deprecated This functionality will be replaced by image styles.
 *
 */
function allegro_item_resize_image($url) {
  $image = file_get_contents($url);

  // właśnie tutaj używamy Base64 ręcznie, ale nigdzie indziej!
  while (strlen(base64_encode($image)) > 200000) {
    $temp = imagecreatefromstring($image);
    $x = ceil(0.9 * imagesx($temp));
    $y = ceil(0.9 * imagesy($temp));

    $image = imagecreatetruecolor($x, $y);
    imagecopyresized($image, $temp, 0, 0, 0, 0, $x, $y, imagesx($temp), imagesy($temp));

    imagejpeg($image, 'temp.jpg', 75);
    $image = file_get_contents('temp.jpg');
    unlink('temp.jpg');
  }

  return $image;
}

/**
 * Sets the page title based on the specified Allegro item.
 *
 * @param object $allegro_item
 *   The Allegro item object.
 */
function allegro_item_page_title(AllegroItem $allegro_item) {
  return $allegro_item->title;
}

/**
 * Load an Allegro item object from the database.
 *
 * @param $id
 *   The Allegro item ID.
 * @param $reset
 *   Whether to reset the allegro_item_load_multiple() cache.
 *
 * @return object
 *   A fully-populated Allegro item object.
 */
function allegro_item_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $conditions = array();
  $allegro_item = allegro_item_load_multiple($ids, $conditions, $reset);
  return $allegro_item ? reset($allegro_item) : FALSE;
}

/**
 * Load Allegro item entities from the database.
 *
 * @see entity_load()
 *
 * @param array $ids
 *   An array of Allegro item IDs.
 * @param array $conditions
 *   An array of conditions on the {allegro_item} table in the form 'field' => $value.
 * @param bool $reset
 *   Whether to reset the internal entity_load() cache.
 *
 * @return object
 *   An array of Allegro item objects indexed by NID.
 */
function allegro_item_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('allegro_item', $ids, $conditions, $reset);
}

/**
 * Load an Allegro item by external ID.
 */
function allegro_item_load_by_external_id($external_id) {
  $allegro_items = allegro_item_load_multiple(array(), array('external_id' => $external_id));
  return $allegro_items ? reset($allegro_items) : FALSE;
}

/**
 * View the Allegro item.
 */
function allegro_item_view(AllegroItem $allegro_item, $view_mode = 'default', $langcode = NULL) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }

  return $allegro_item->view($view_mode, $langcode);
}

/**
 * Returns an initialized allegro item object.
 *
 * @return
 *   A allegro item object with all default fields initialized.
 */
function allegro_item_create($values = array()) {
  return entity_create('allegro_item', $values);
}

/**
 * Save an Allegro item.
 *
 * @param $allegro_item
 *   The Allegro item to be saved.
 *
 * @return object
 *   The saved Allegro item.
 */
function allegro_item_save(AllegroItem $allegro_item) {
  return $allegro_item->save();
}

/**
 * Finishes an Allegro item by ID.
 *
 * @param $id
 *   The ID of the Allegro item to finish.
 *
 * @return bool
 *   TRUE on success, FALSE otherwise.
 */
function allegro_item_finish($id) {
  return entity_get_controller('allegro_item')->finish(array($id));
}

/**
 * Finishes multiple Allegro items by ID.
 *
 * @param $ids
 *   An array of Allegro item IDs to finish.
 *
 * @return bool
 *   TRUE on success, FALSE otherwise.
 */
function allegro_item_finish_multiple($id) {
  return entity_get_controller('allegro_item')->finish($ids);
}

/**
 * Deletes an Allegro item by ID.
 *
 * @param $id
 *   The ID of the Allegro item to delete.
 *
 * @return bool
 *   TRUE on success, FALSE otherwise.
 */
function allegro_item_delete($id) {
  return entity_get_controller('allegro_item')->delete(array($id));
}

/**
 * Deletes multiple Allegro items by ID.
 *
 * @param $ids
 *   An array of Allegro item IDs to delete.
 *
 * @return bool
 *   TRUE on success, FALSE otherwise.
 */
function allegro_item_delete_multiple($ids) {
  return entity_get_controller('allegro_item')->delete($ids);
}

/**
 * Sells again multiple Allegro items.
 *
 * @param $id
 *   An array of Allegro item IDs to sell again.
 */
function allegro_item_sell_again_multiple(array $ids) {
  $allegro_items = $ids ? allegro_item_load_multiple($ids) : FALSE;
  if (!$allegro_items) {
    // Do nothing, in case invalid or no ids have been passed.
    return FALSE;
  }

  try {
    $allegro = allegro_client();
    $external_ids = array();
    foreach ($allegro_items as $allegro_item) {
      $external_ids[] = $allegro_item->external_id;
    }

    dpm($allegro->sellSomeAgain($external_ids, 0, 14, 3, $ids));
    return TRUE;
  }
  catch (SoapFault $e) {
    drupal_set_message($e->faultstring, 'error');
    return FALSE;
  }
}

/**
 * Sells again Allegro item.
 *
 * @param int $id
 *   The ID of the Allegro item to sell again.
 */
function allegro_item_sell_again($id) {
  return allegro_item_sell_again_multiple(array($id));
}

/**
 * Returns the options list for the item status property.
 */
function allegro_item_status_options_list() {
  return array(
    ALLEGRO_ITEM_STATUS_NOT_SOLD => t('Not sold'),
    ALLEGRO_ITEM_STATUS_SELLING => t('Selling'),
    ALLEGRO_ITEM_STATUS_SOLD => t('Sold'),
  );
}

/**
 * Implements hook_views_api().
 */
function allegro_item_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'allegro_item') . '/views',
  );
}
