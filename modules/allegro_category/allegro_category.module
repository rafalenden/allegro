<?php

/**
 * Implements hook_menu().
 */
function allegro_category_menu() {
  $items['admin/allegro/settings/categories'] = array(
    'title' => 'Categories',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('allegro_category_settings_form'),
    'access arguments' => array('administer allegro categories'),
    'file' => 'allegro_category.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Loads a category object from the database.
 *
 * @param $cid
 *   The category ID.
 *
 * @return
 *   A fully-populated category object, or FALSE if the category is not found.
 */
function allegro_category_load($cid) {
  return allegro_category_load_multiple(array($cid));
}

/**
 * Loads multiply category objects from the database.
 *
 * @param $cids
 *   An array of category IDs.
 *
 * @return
 *   An array of category objects (NOT JET(indexed by cid)).
 */
function allegro_category_load_multiple($cids) {
  $categories = db_select('allegro_category', 'c')
    ->condition('c.parent', $cids, 'IN')
    ->condition('c.country_code', variable_get('allegro_country_code', 1), '=')
    ->fields('c', array('cid', 'name', 'parent', 'position', 'is_product_catalogue_enabled'))
    ->orderBy('c.position')
    ->execute()->fetchField();
  return $categories;
}

/**
 * Loads parent ID of category from the database.
 *
 * @param $cid
 *   The category ID.
 *
 * @return
 *   Parent category ID.
 *
 * @todo Load parent object, not only id.
 */
function allegro_category_load_parent_id($cid) {
  $parent_id = db_select('allegro_category', 'c')
    ->condition('c.cid', $cid, '=')
    ->fields('c', array('parent'))
    ->execute()->fetchField();
  return $parent_id;
}

/**
 * Loads category parents from the database.
 *
 * @param $cid
 *   The category ID.
 *
 * @return
 *   An array of category objects (NOT(indexed by cid)).
 */
function allegro_category_load_parents($cid) {
  $parents = array();
  if ($cid) {
    $parents[] = allegro_category_load($cid);
    $n = 0;
    while ($parent = allegro_category_load_parent_id($parents[$n])) {
      $parents = array_merge($parents, array(reset($parent)));
      $n++;
    }
  }
  return $parents;
}

/**
 * Loads category children from the database.
 *
 * @param $parent_id
 *   The parent category ID.
 *
 * @return
 *   An array of category objects (NOT(indexed by cid)).
 */
function allegro_category_load_children($parent_id = 0) {
  if (!is_numeric($parent_id)) {
    return array();
  }
  $categories = db_select('allegro_category', 'c')
   ->condition('c.parent', $parent_id, '=')
   ->condition('c.country_code', variable_get('allegro_country_code', 1), '=')
   ->fields('c', array('cid', 'name', 'parent', 'position', 'is_product_catalogue_enabled'))
   ->orderBy('c.position')
   ->execute();
  return $categories;
}

/**
 * Download Allegro categories from SOAP service and insert to the database.
 *
 * @param $offset
 *   Parameter which allows for controlling loading of new data portions (from 0).
 * @param $package
 *   Parameter which allows for defining a size of data portion (scope 1-5000; 5000 by default).
 *
 * @return
 *   Number of downloaded and inserted categories.
 */
function allegro_category_download($offset, $package) {
  $transaction = db_transaction();
  try {
    $allegro = allegro_client();
    $response = $allegro->getCatsDataLimit($offset, $package);
    $counter = 0;
    foreach ($response->catsList->item as $category) {
      db_insert('allegro_category')
       ->fields(array(
         'country_code' => $allegro->countryCode,
         'cid' => $category->catId,
         'name' => $category->catName,
         'parent' => $category->catParent,
         'position' => $category->catPosition,
         'is_product_catalogue_enabled' => $category->catIsProductCatalogueEnabled,
       ))
       ->execute();
      $counter++;
    }

    variable_set('allegro_category_ver_key', $response->verKey);
    variable_set('allegro_category_ver_str', $response->verStr);
  }
  catch (SoapFault $e) {
    $transaction->rollback();
    watchdog_exception('allegro_category', $e);
    drupal_set_message($e->faultstring, 'error');
  }
  return $counter;
}

/**
 * Delete all categories for given country.
 *
 * @param int $country_code
 *   Country code of categories to be deleted.
 */
function allegro_category_delete_by_country($country_code) {
  db_delete('allegro_category')
   ->condition('country_code', $country_code)
   ->execute();
}

/**
 * Delete all categories.
 */
function allegro_category_delete_all() {
  db_delete('allegro_category')->execute();
}

/*
 * -----------------------------------------
 * Get category tree.
 * -----------------------------------------
 */


function allegro_category_hierarchy_select_children($parent) {
  $children = array();
  $categories = allegro_category_load_children($parent);

  foreach ($categories as $category) {
    $children[$category->cid] = $category->name;
  }

  return $children;
}

function allegro_category_hierarchy_select_lineage($item) {
  $lineage = array();
  do {
    $lineage[] = $item;
    $item = db_select('allegro_category', 'c')
      ->condition('c.cid', $item, '=')
      ->fields('c', array('parent'))
      ->execute()->fetchField();
  }
  while ($item > 0);

  return array_reverse($lineage);
}
